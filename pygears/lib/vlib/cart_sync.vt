{%- import 'snippet.j2' as snippet -%}

{% set Queue = import_from('pygears.typing', 'Queue') %}
{% set typeof = import_from('pygears.typing', 'typeof') %}

{%- set queue_intfs = [] -%}
{%- for intf in intfs|isinput if typeof(intf['type'], Queue) -%}
  {%- do queue_intfs.append(intf) -%}
{%- endfor -%}

{%- for intf in intfs -%}
  {%- do intf.update({'lvl': intf['type'].lvl if typeof(intf['type'], Queue) else 0}) -%}
  {%- do intf.update({'data_eot': '(&%s_s_eot)'|format(intf['name']) if typeof(intf['type'], Queue) else 1}) -%}
{%- endfor -%}

{% if params['outsync'] %} 
  {% set base_module_name = module_name + "_base" %} 
{% else %}
  {% set base_module_name = module_name %} 
{% endif %} 

{% call snippet.module_with_intf_structs(base_module_name, intfs, intfs|isinput, comment, outtype="wire") %}

  {%- set input_intf_names = intfs|isinput|keymap("name") %}
  {%- set min_lvl = intfs|isinput|keymap("lvl")|min %}
  {%- set out_intf_names = intfs|isoutput|keymap("name") %}

  wire all_valid;
  assign all_valid   = {{input_intf_names|format_list("%s_valid")|join(" && ")}};

  {% for din, dout in zip(input_intf_names, out_intf_names) %}
    assign {{dout}}_valid = all_valid;
    assign {{dout}}_data = {{din}}_data;
  {% endfor %}

  {% if min_lvl > 0 %}
    assign din0_ready = din1_valid && din1_ready && {{intfs[1]['data_eot']}};
    assign din1_ready = dout1_valid && dout1_ready;
  {% elif intfs[1]['lvl'] > 0 %}
    assign din0_ready = din1_valid && din1_ready && {{intfs[1]['data_eot']}};
    assign din1_ready = dout1_valid && dout1_ready;
  {% else %}
    assign din0_ready = dout0_valid && dout0_ready;
    assign din1_ready = din0_valid && din0_ready && {{intfs[0]['data_eot']}};
  {% endif %}
{% endcall %}

{% if params['outsync'] %}
{{snippet.output_syncguard(module_name, intfs)}}
{% endif %}
